// MediaStreamTrack 对象 
MediaStreamTrack = function MediaStreamTrack(){return framevm.toolsFunc.throwError("TypeError", "Illegal constructor");};
framevm.toolsFunc.safeProto(MediaStreamTrack,"MediaStreamTrack");
Object.setPrototypeOf(MediaStreamTrack.prototype, EventTarget.prototype);
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "kind", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "kind_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "id", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "id_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "label", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "label_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "enabled", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "enabled_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "enabled_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "muted", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "muted_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "onmute", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "onmute_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "onmute_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "onunmute", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "onunmute_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "onunmute_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "readyState", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "readyState_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "onended", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "onended_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "onended_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "contentHint", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "contentHint_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "contentHint_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "applyConstraints", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "applyConstraints", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "clone", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "clone", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "getCapabilities", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "getCapabilities", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "getConstraints", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "getConstraints", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "getSettings", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "getSettings", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "stop", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "stop", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "oncapturehandlechange", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "oncapturehandlechange_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "oncapturehandlechange_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaStreamTrack.prototype, "getCaptureHandle", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaStreamTrack.prototype, "MediaStreamTrack", "getCaptureHandle", arguments)}});
