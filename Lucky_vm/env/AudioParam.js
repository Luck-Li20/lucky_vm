// AudioParam 对象 
AudioParam = function AudioParam(){return framevm.toolsFunc.throwError("TypeError", "Illegal constructor");};
framevm.toolsFunc.safeProto(AudioParam,"AudioParam");
framevm.toolsFunc.defineProperty(AudioParam.prototype, "value", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "value_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "value_set", arguments)}});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "automationRate", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "automationRate_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "automationRate_set", arguments)}});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "defaultValue", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "defaultValue_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "minValue", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "minValue_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "maxValue", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "maxValue_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "cancelAndHoldAtTime", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "cancelAndHoldAtTime", arguments)}});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "cancelScheduledValues", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "cancelScheduledValues", arguments)}});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "exponentialRampToValueAtTime", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "exponentialRampToValueAtTime", arguments)}});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "linearRampToValueAtTime", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "linearRampToValueAtTime", arguments)}});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "setTargetAtTime", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "setTargetAtTime", arguments)}});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "setValueAtTime", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "setValueAtTime", arguments)}});
framevm.toolsFunc.defineProperty(AudioParam.prototype, "setValueCurveAtTime", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, AudioParam.prototype, "AudioParam", "setValueCurveAtTime", arguments)}});
