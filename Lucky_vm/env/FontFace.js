// FontFace 对象 
FontFace = function FontFace(){return framevm.toolsFunc.throwError("TypeError", "Failed to construct 'FontFace': 2 arguments required, but only 0 present.");};
framevm.toolsFunc.safeProto(FontFace,"FontFace");
framevm.toolsFunc.defineProperty(FontFace.prototype, "family", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "family_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "family_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "style", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "style_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "style_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "weight", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "weight_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "weight_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "stretch", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "stretch_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "stretch_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "unicodeRange", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "unicodeRange_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "unicodeRange_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "variant", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "variant_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "variant_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "featureSettings", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "featureSettings_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "featureSettings_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "display", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "display_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "display_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "ascentOverride", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "ascentOverride_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "ascentOverride_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "descentOverride", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "descentOverride_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "descentOverride_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "lineGapOverride", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "lineGapOverride_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "lineGapOverride_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "sizeAdjust", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "sizeAdjust_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "sizeAdjust_set", arguments)}});
framevm.toolsFunc.defineProperty(FontFace.prototype, "status", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "status_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(FontFace.prototype, "loaded", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "loaded_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(FontFace.prototype, "load", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "load", arguments)}});
