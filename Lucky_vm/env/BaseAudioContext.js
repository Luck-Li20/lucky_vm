// BaseAudioContext 对象 
BaseAudioContext = function BaseAudioContext(){return framevm.toolsFunc.throwError("TypeError", "Illegal constructor");};
framevm.toolsFunc.safeProto(BaseAudioContext,"BaseAudioContext");
Object.setPrototypeOf(BaseAudioContext.prototype, EventTarget.prototype);
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "destination", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "destination_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "currentTime", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "currentTime_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "sampleRate", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "sampleRate_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "listener", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "listener_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "state", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "state_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "onstatechange", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "onstatechange_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "onstatechange_set", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createAnalyser", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createAnalyser", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createBiquadFilter", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createBiquadFilter", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createBuffer", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createBuffer", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createBufferSource", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createBufferSource", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createChannelMerger", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createChannelMerger", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createChannelSplitter", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createChannelSplitter", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createConstantSource", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createConstantSource", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createConvolver", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createConvolver", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createDelay", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createDelay", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createDynamicsCompressor", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createDynamicsCompressor", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createGain", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createGain", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createIIRFilter", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createIIRFilter", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createOscillator", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createOscillator", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createPanner", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createPanner", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createPeriodicWave", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createPeriodicWave", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createScriptProcessor", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createScriptProcessor", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createStereoPanner", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createStereoPanner", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "createWaveShaper", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "createWaveShaper", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "decodeAudioData", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "decodeAudioData", arguments)}});
framevm.toolsFunc.defineProperty(BaseAudioContext.prototype, "audioWorklet", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, BaseAudioContext.prototype, "BaseAudioContext", "audioWorklet_get", arguments)}, set:undefined});
