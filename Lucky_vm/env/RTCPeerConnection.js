// RTCPeerConnection 对象 
RTCPeerConnection = function RTCPeerConnection(){};
framevm.toolsFunc.safeProto(RTCPeerConnection,"RTCPeerConnection");
Object.setPrototypeOf(RTCPeerConnection.prototype, EventTarget.prototype);
framevm.toolsFunc.defineProperty(RTCPeerConnection, "generateCertificate", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection, "RTCPeerConnection", "generateCertificate", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "localDescription", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "localDescription_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "currentLocalDescription", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "currentLocalDescription_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "pendingLocalDescription", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "pendingLocalDescription_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "remoteDescription", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "remoteDescription_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "currentRemoteDescription", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "currentRemoteDescription_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "pendingRemoteDescription", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "pendingRemoteDescription_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "signalingState", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "signalingState_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "iceGatheringState", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "iceGatheringState_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "iceConnectionState", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "iceConnectionState_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "connectionState", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "connectionState_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "canTrickleIceCandidates", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "canTrickleIceCandidates_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "onnegotiationneeded", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onnegotiationneeded_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onnegotiationneeded_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "onicecandidate", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onicecandidate_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onicecandidate_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "onsignalingstatechange", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onsignalingstatechange_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onsignalingstatechange_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "oniceconnectionstatechange", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "oniceconnectionstatechange_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "oniceconnectionstatechange_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "onconnectionstatechange", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onconnectionstatechange_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onconnectionstatechange_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "onicegatheringstatechange", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onicegatheringstatechange_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onicegatheringstatechange_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "onicecandidateerror", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onicecandidateerror_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onicecandidateerror_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "ontrack", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "ontrack_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "ontrack_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "sctp", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "sctp_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "ondatachannel", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "ondatachannel_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "ondatachannel_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "onaddstream", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onaddstream_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onaddstream_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "onremovestream", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onremovestream_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "onremovestream_set", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "addIceCandidate", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "addIceCandidate", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "addStream", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "addStream", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "addTrack", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "addTrack", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "addTransceiver", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "addTransceiver", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "close", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "close", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "createAnswer", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "createAnswer", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "createDTMFSender", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "createDTMFSender", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "createDataChannel", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "createDataChannel", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "createOffer", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "createOffer", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "getConfiguration", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "getConfiguration", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "getLocalStreams", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "getLocalStreams", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "getReceivers", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "getReceivers", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "getRemoteStreams", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "getRemoteStreams", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "getSenders", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "getSenders", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "getStats", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "getStats", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "getTransceivers", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "getTransceivers", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "removeStream", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "removeStream", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "removeTrack", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "removeTrack", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "restartIce", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "restartIce", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "setConfiguration", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "setConfiguration", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "setLocalDescription", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "setLocalDescription", arguments)}});
framevm.toolsFunc.defineProperty(RTCPeerConnection.prototype, "setRemoteDescription", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, RTCPeerConnection.prototype, "RTCPeerConnection", "setRemoteDescription", arguments)}});
