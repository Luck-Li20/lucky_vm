// DOMTokenList 对象 
DOMTokenList = function DOMTokenList(){return framevm.toolsFunc.throwError("TypeError", "Illegal constructor");};
framevm.toolsFunc.safeProto(DOMTokenList,"DOMTokenList");
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "entries", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "entries", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "keys", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "keys", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "values", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "values", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "forEach", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "forEach", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "length", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "length_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "value", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "value_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "value_set", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "add", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "add", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "contains", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "contains", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "item", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "item", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "remove", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "remove", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "replace", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "replace", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "supports", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "supports", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "toggle", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "toggle", arguments)}});
framevm.toolsFunc.defineProperty(DOMTokenList.prototype, "toString", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, DOMTokenList.prototype, "DOMTokenList", "toString", arguments)}});
