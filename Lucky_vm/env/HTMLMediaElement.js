// HTMLMediaElement 对象
HTMLMediaElement = function HTMLMediaElement(){return framevm.toolsFunc.throwError("TypeError", "Illegal constructor");};
framevm.toolsFunc.safeProto(HTMLMediaElement,"HTMLMediaElement");
Object.setPrototypeOf(HTMLMediaElement.prototype, HTMLElement.prototype);
framevm.toolsFunc.defineProperty(HTMLMediaElement, "NETWORK_EMPTY", {configurable:false, enumerable:true, writable:false, value:0});
framevm.toolsFunc.defineProperty(HTMLMediaElement, "NETWORK_IDLE", {configurable:false, enumerable:true, writable:false, value:1});
framevm.toolsFunc.defineProperty(HTMLMediaElement, "NETWORK_LOADING", {configurable:false, enumerable:true, writable:false, value:2});
framevm.toolsFunc.defineProperty(HTMLMediaElement, "NETWORK_NO_SOURCE", {configurable:false, enumerable:true, writable:false, value:3});
framevm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_NOTHING", {configurable:false, enumerable:true, writable:false, value:0});
framevm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_METADATA", {configurable:false, enumerable:true, writable:false, value:1});
framevm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_CURRENT_DATA", {configurable:false, enumerable:true, writable:false, value:2});
framevm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_FUTURE_DATA", {configurable:false, enumerable:true, writable:false, value:3});
framevm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_ENOUGH_DATA", {configurable:false, enumerable:true, writable:false, value:4});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "error", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "error_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "src", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "src_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "src_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "currentSrc", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "currentSrc_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "crossOrigin", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "crossOrigin_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "crossOrigin_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "networkState", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "networkState_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "preload", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "preload_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "preload_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "buffered", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "buffered_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "readyState", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "readyState_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "seeking", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "seeking_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "currentTime", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "currentTime_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "currentTime_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "duration", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "duration_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "paused", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "paused_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "defaultPlaybackRate", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "defaultPlaybackRate_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "defaultPlaybackRate_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "playbackRate", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "playbackRate_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "playbackRate_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "played", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "played_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "seekable", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "seekable_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "ended", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "ended_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "autoplay", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "autoplay_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "autoplay_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "loop", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "loop_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "loop_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "preservesPitch", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "preservesPitch_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "preservesPitch_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "controls", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "controls_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "controls_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "controlsList", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "controlsList_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "controlsList_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "volume", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "volume_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "volume_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "muted", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "muted_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "muted_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "defaultMuted", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "defaultMuted_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "defaultMuted_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "textTracks", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "textTracks_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "webkitAudioDecodedByteCount", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "webkitAudioDecodedByteCount_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "webkitVideoDecodedByteCount", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "webkitVideoDecodedByteCount_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "onencrypted", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "onencrypted_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "onencrypted_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "onwaitingforkey", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "onwaitingforkey_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "onwaitingforkey_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "srcObject", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "srcObject_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "srcObject_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "NETWORK_EMPTY", {configurable:false, enumerable:true, writable:false, value:0});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "NETWORK_IDLE", {configurable:false, enumerable:true, writable:false, value:1});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "NETWORK_LOADING", {configurable:false, enumerable:true, writable:false, value:2});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "NETWORK_NO_SOURCE", {configurable:false, enumerable:true, writable:false, value:3});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_NOTHING", {configurable:false, enumerable:true, writable:false, value:0});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_METADATA", {configurable:false, enumerable:true, writable:false, value:1});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_CURRENT_DATA", {configurable:false, enumerable:true, writable:false, value:2});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_FUTURE_DATA", {configurable:false, enumerable:true, writable:false, value:3});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_ENOUGH_DATA", {configurable:false, enumerable:true, writable:false, value:4});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "addTextTrack", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "addTextTrack", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "canPlayType", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "canPlayType", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "captureStream", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "captureStream", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "load", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "load", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "pause", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "pause", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "play", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "play", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "sinkId", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "sinkId_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "remote", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "remote_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "disableRemotePlayback", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "disableRemotePlayback_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "disableRemotePlayback_set", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "setSinkId", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "setSinkId", arguments)}});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "mediaKeys", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "mediaKeys_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "setMediaKeys", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "setMediaKeys", arguments)}});
