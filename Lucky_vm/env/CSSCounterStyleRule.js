// CSSCounterStyleRule 对象 
CSSCounterStyleRule = function CSSCounterStyleRule(){return framevm.toolsFunc.throwError("TypeError", "Illegal constructor");};
framevm.toolsFunc.safeProto(CSSCounterStyleRule,"CSSCounterStyleRule");
Object.setPrototypeOf(CSSCounterStyleRule.prototype, CSSRule.prototype);
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "name", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "name_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "name_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "system", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "system_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "system_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "symbols", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "symbols_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "symbols_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "additiveSymbols", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "additiveSymbols_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "additiveSymbols_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "negative", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "negative_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "negative_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "prefix", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "prefix_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "prefix_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "suffix", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "suffix_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "suffix_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "range", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "range_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "range_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "pad", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "pad_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "pad_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "speakAs", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "speakAs_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "speakAs_set", arguments)}});
framevm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "fallback", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "fallback_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "fallback_set", arguments)}});
