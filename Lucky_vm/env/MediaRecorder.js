// MediaRecorder 对象 
MediaRecorder = function MediaRecorder(){return framevm.toolsFunc.throwError("TypeError", "Failed to construct 'MediaRecorder': 1 argument required, but only 0 present.");};
framevm.toolsFunc.safeProto(MediaRecorder,"MediaRecorder");
Object.setPrototypeOf(MediaRecorder.prototype, EventTarget.prototype);
framevm.toolsFunc.defineProperty(MediaRecorder, "isTypeSupported", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder, "MediaRecorder", "isTypeSupported", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "stream", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "stream_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "mimeType", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "mimeType_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "state", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "state_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "onstart", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onstart_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onstart_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "onstop", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onstop_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onstop_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "ondataavailable", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "ondataavailable_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "ondataavailable_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "onpause", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onpause_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onpause_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "onresume", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onresume_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onresume_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "onerror", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onerror_get", arguments)}, set:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "onerror_set", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "videoBitsPerSecond", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "videoBitsPerSecond_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "audioBitsPerSecond", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "audioBitsPerSecond_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "audioBitrateMode", {configurable:true, enumerable:true, get:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "audioBitrateMode_get", arguments)}, set:undefined});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "pause", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "pause", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "requestData", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "requestData", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "resume", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "resume", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "start", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "start", arguments)}});
framevm.toolsFunc.defineProperty(MediaRecorder.prototype, "stop", {configurable:true, enumerable:true, writable:true, value:function (){return framevm.toolsFunc.dispatch(this, MediaRecorder.prototype, "MediaRecorder", "stop", arguments)}});
